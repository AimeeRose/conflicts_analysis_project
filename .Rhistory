source("Problemset4v2.R")
Posdef <- function (n, ev = runif(n, 0, 10))
{
Z <- matrix(ncol=n, rnorm(n^2))
decomp <- qr(Z)
Q <- qr.Q(decomp)
R <- qr.R(decomp)
d <- diag(R)
ph <- d / abs(d)
O <- Q %*% diag(ph)
Z <- t(O) %*% diag(ev) %*% O
return(Z)
}
A <- Posdef(5)
b <- c(1,2,3,4,5)
solve(A, b)
my.solve(A, b)
chol(A)
my.chol(A)
# BEGIN CODE
my.chol <- function(A) {
# This function computes the Cholesky decomposition
# for a positive definite matrix A and returns the lower triangular matrix L.
L <- matrix(0, nrow(A), ncol(A))
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
if (i==j) {L[i,j] = sqrt( A[i,j] - sum(L[i,1:(i-1)]**2))} else {
if (j < i)  { L[i,j] = 1/(L[j,j])*(A[i,j] - sum(L[i,1:(j-1)]*L[j,1:(j-1)]))}
else {L[i,j] = 0 } }
}
}
return(L)
}
my.forward.solve <- function(L, b) {
# This function solves the linear system of equations Lx = b
# using the lower triangular matrix produced by the Cholesky decomposition.
x = rep(0,length(b))
for (i in 1:length(b)) {
x[i] = (b[i] - sum(L[i,1:(i-1)]*x[1:(i-1)]))/L[i,i]
}
x
}
my.back.solve <- function(U, b) {
# This function solves the linear system of equations Ux = b, where
# U is the upper triangular matrix from the Cholesky decomposition,
# and b is the vector-solution resulting from the forward linear system of equations.
x = rep(0,length(b))
for (i in length(b):1) {
if (i==length(b)) { x[i] = b[i]/U[i,i] }
else { x[i] = (b[i] - sum(U[i,(i+1):length(b)]*x[(i+1):length(b)]))/U[i,i] }
}
x
}
my.solve <- function(A, b) {
# This function solves the system of linear equations Ax = b
# in three steps, using the Cholesky decomposition
L <- my.chol(A)
y <- my.forward.solve(L, b)
x <- my.back.solve(t(L), y)
x
}
# END CODE
my.solve(A, b)
solve(A, b)
A <- Posdef(2)
b <- c(1,2)
solve(A, b)
my.solve(A, b)
# BEGIN CODE
my.chol <- function(A) {
# This function computes the Cholesky decomposition
# for a positive definite matrix A and returns the lower triangular matrix L.
L <- matrix(0, nrow(A), ncol(A))
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
if (i==j) {L[i,j] = sqrt( A[i,j] - sum(L[i,1:(i-1)]**2))} else {
if (j < i)  { L[i,j] = 1/(L[j,j])*(A[i,j] - sum(L[i,1:(j-1)]*L[j,1:(j-1)]))}
else {L[i,j] = 0 } }
}
}
return(L)
}
my.forward.solve <- function(L, b) {
# This function solves the linear system of equations Lx = b
# using the lower triangular matrix produced by the Cholesky decomposition.
x = rep(0,length(b))
for (i in 1:length(b)) {
x[i] = (b[i] - sum(L[i,1:(i-1)]*x[1:(i-1)]))/L[i,i]
}
x
}
my.back.solve <- function(U, b) {
# This function solves the linear system of equations Ux = b, where
# U is the upper triangular matrix from the Cholesky decomposition,
# and b is the vector-solution resulting from the forward linear system of equations.
x = rep(0,length(b))
for (i in length(b):1) {
if (i==length(b)) { x[i] = b[i]/U[i,i] }
else { x[i] = (b[i] - sum(U[i,(i+1):length(b)]*x[(i+1):length(b)]))/U[i,i] }
}
x
}
my.solve <- function(A, b) {
# This function solves the system of linear equations Ax = b
# in three steps, using the Cholesky decomposition
L <- my.chol(A)
y <- my.forward.solve(L, b)
x <- my.back.solve(t(L), y)
x
}
# END CODE
library(MASS)
library(ggplot2)
r.version()
r.version
R.version
?curve
?plot
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, xlab=$\alpha$)
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, xlab=$\alpha$)
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1)
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab="hola")
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab="f(alpha)", xlab="alpha")
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(alpha), xlab="alpha")
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.2,0.8,c(f1, f2, f3))
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.1,0.9,c('f1', 'f2', 'f3'), col=c('black', 'red', 'blue'))
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.1,0.9,c('f1', 'f2', 'f3'), lty=c(1,1), col=c('black', 'red', 'blue'))
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.1,0.9,c(expression(1 - (1 - alpha)**(1/m)), 'f2', 'f3'), lty=c(1,1), col=c('black', 'red', 'blue'))
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.1,0.9,c(expression(1 - (1 - alpha)**(1/m)), expression(alpha/m), expression(alpha)), lty=c(1,1), col=c('black', 'red', 'blue'))
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.0.5,0.95,c(expression(1 - (1 - alpha)**(1/m)), expression(alpha/m), expression(alpha)), lty=c(1,1), col=c('black', 'red', 'blue'))
m <- 10
f1 <- function(alpha) 1 - (1- alpha)**(1/m)
f2 <- function(alpha) alpha/m
f3 <- function(alpha) alpha
plot(f1, ylab=expression(f(alpha)), xlab=expression(alpha))
curve(f2, add=TRUE, col='red')
curve(f3, add=TRUE, col= 'blue')
legend(0.05,0.95,c(expression(1 - (1 - alpha)**(1/m)), expression(alpha/m), expression(alpha)), lty=c(1,1), col=c('black', 'red', 'blue'))
data <- data ^L
^L
data <- read.table("labelled_suspicious.txt")
head(data)
plot(data$t, data$phi1)
plot(data$t, data$phi2)
table(data$t)
summary(data)
summary(data$t)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("RmySQL")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("RMySQL")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mainPanel(
tabsetPanel(
#tabPanel("Distance between Actors", plotOutput("actorsMap")),
tabPanel("Significance of Events", plotOutput("significan
mainPanel(
tabsetPanel(
#tabPanel("Distance between Actors", plotOutput("actorsMap")),
tabPanel("Significance of Events", plotOutput("significanceMap"))
)
)
mainPanel(
tabsetPanel(
#tabPanel("Distance between Actors", plotOutput("actorsMap")),
tabPanel("Significance of Events", plotOutput("significanceMap"))
)
)
library(shiny)
runExample("01_hello")
setwd("Desktop")
setwd("~/Desktop/conflicts_analysis_project")
runApp("shiny_app")
runExample("02_text")
runExample("02_reactivity")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
Q
runExample("09_upload")
runExample("11_timer")
runApp("shiny_app")
c <- curve(dnorm(x))
c <- curve(dnorm(x,0,1))
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
cord.x <- c(cord.x,-3)
cord.y <- c(cord.y,dnorm(-3))
cord.x <- c(cord.x,-2,-2)
cord.y <- c(cord.y,dnorm(-2),0)
polygon(cord.x,cord.y,col='skyblue')
curve(dnorm(x,0,1),xlim=c(-3,3),main='p-value illustrated')
cord.x <- c(cord.x,-3)
z.ex <- z.test(rnorm(25,100,5),99,5)
z.ex
plot(z.ex)
z.ex <- z.test(rnorm(25,100,5),99,5)
z.ex <- z.test::NCStats(rnorm(25,100,5),99,5)
z.ex <- NCStats::z.test(rnorm(25,100,5),99,5)
z.ex <- NCStats::z.test(rnorm(25,100,5),99,5)
install.packages("NCStats")
